<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reference | Scratch]]></title>
  <link href="http://natomato.github.io/blog/categories/reference/atom.xml" rel="self"/>
  <link href="http://natomato.github.io/"/>
  <updated>2013-10-08T14:13:18-07:00</updated>
  <id>http://natomato.github.io/</id>
  <author>
    <name><![CDATA[Nate]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Switching to rbenv]]></title>
    <link href="http://natomato.github.io/blog/2013/09/17/rbenv-set-up/"/>
    <updated>2013-09-17T17:29:00-07:00</updated>
    <id>http://natomato.github.io/blog/2013/09/17/rbenv-set-up</id>
    <content type="html"><![CDATA[<h3 id="installed-using-homebrew">Installed using Homebrew</h3>
<pre><code>homebrew install rbenv
homebrew install ruby-build
homebrew install rbenv-gem-rehash
</code></pre>

<h5 id="additional-plugins">Additional Plugins</h5>

<ul>
  <li>
    <p>rbenv-env</p>

    <p>~~~
  mkdir /usr/local/var/rbenv/plugins
  git clone https://github.com/ianheggie/rbenv-env.git
  ~~~</p>

    <p><code>rbenv env</code> to see environment variables</p>
  </li>
  <li>
    <p>rbenv-binstubs</p>

    <pre><code>mkdir -p ~/.rbenv/plugins
git clone https://github.com/ianheggie/rbenv-binstubs.git 
</code></pre>

    <p>Then for each application directory run the following</p>

    <pre><code>bundle install --binstubs .bundle/bin 
rbenv rehash
</code></pre>

    <p>Now you donâ€™t need to type <code>bundle exec</code> before typing a command, like <code>rake</code></p>

    <p><code>rbenv which COMMAND</code> to confirm that the bundler binstub is being used </p>

    <p><code>bundle show GEM</code> to show which gem bundle will use </p>
  </li>
</ul>

<h3 id="homebrew-dirs">Homebrew Dirs</h3>

<p>It stores shims in <code>/usr/local/var/rbenv/shims</code>
It stores programs in <code>/usr/local/Cellar/</code>
It does not use the default shims folder <code>~/.rbenv</code></p>

<h3 id="to-use-rbenv">To Use rbenv</h3>
<p>Example Usage installing Ruby 2.0 for the first time</p>

<pre><code>rbenv install 2.0.0-p247
rbenv versions
rbenv local 2.0.0-p247
rbenv versions
gem install bundler pg rails thin --no-rdoc --no-ri
bundle install --binstubs .bundle/bin
rbenv rehash
</code></pre>

<h3 id="errors">Errors</h3>
<p>Error: <code>rbenv: version '1.9.3' is not installed</code>
Solution: <code>rbenv local 1.9.3-p392</code></p>

<h3 id="miscellaneous-info">Miscellaneous Info</h3>
<p>Source: http://robots.thoughtbot.com/post/47273164981/using-rbenv-to-manage-rubies-and-gems</p>

<p>Install your preferred version of Ruby and set it as the global default:</p>

<pre><code>rbenv install 1.9.3-p392
rbenv global 1.9.3-p392
</code></pre>

<p>Update to the latest Rubygems version:
    <code>gem update --system</code></p>

<p>Install gems critical to Rails development, e.g.
    <code>gem install bundler pg rails thin --no-rdoc --no-ri</code></p>

<p>You can set project-specific Ruby and gem versions by running the rbenv local command within your project directory:
    <code>rbenv local 1.9.3-p385</code></p>

<p>From https://github.com/sstephenson/rbenv
    <code>rbenv local</code></p>

<p>Sets a local application-specific Ruby version by writing the version name to a .ruby-version file in the current directory. This version overrides the global version, and can be overridden itself by setting the <code>RBENV_VERSION</code> environment variable or with the rbenv shell command.</p>

<pre><code>$ rbenv local 1.9.3-p327
</code></pre>

<p>The ruby-build plugin provides an rbenv uninstall command to automate the removal process.</p>

<p>To later update these installs, use upgrade instead of install.</p>

<pre><code>$ rbenv install 2.0.0-p247
</code></pre>

<p>The <code>--unset</code> option will unset the Ruby currently assigned to a scope, letting the Ruby from the lower precedence scope show through.</p>
]]></content>
  </entry>
  
</feed>
